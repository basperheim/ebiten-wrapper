package main

import (
	"github.com/hajimehoshi/ebiten/v2"
	"image"
	_ "image/png" // Import to decode PNG images
	"log"
	"os"
)

const (
	screenWidth  = 320
	screenHeight = 240
)

var (
	ebitenImage *ebiten.Image
)

func init() {
	// Open the image file
	file, err := os.Open("assets/forest-tile-128px.png")
	if err != nil {
		log.Fatalf("failed to open image file: %v", err)
	}
	defer file.Close()

	// Decode the image
	img, _, err := image.Decode(file)
	if err != nil {
		log.Fatalf("failed to decode image: %v", err)
	}
	ebitenImage = ebiten.NewImageFromImage(img)
}

type Game struct{}

// Update proceeds the game state. Update is called every tick (1/60 [s] by default).
func (g *Game) Update() error {
	// Here you could handle game logic, input, etc.
	return nil
}

// Draw draws the game screen. Draw is called every frame (1/60 [s] by default).
func (g *Game) Draw(screen *ebiten.Image) {
	// Get the width and height of the image
	w, h := ebitenImage.Bounds().Dx(), ebitenImage.Bounds().Dy()

	// Calculate the position to draw the image centered
	x := (screenWidth - w) / 2
	y := (screenHeight - h) / 2

	// Create a new instance of ebiten.GeoM
	var geoM ebiten.GeoM

	// Translate the GeoM instance
	geoM.Translate(float64(x), float64(y))

	// Draw the image at the calculated position with the transformed GeoM
	screen.DrawImage(ebitenImage, &ebiten.DrawImageOptions{
		GeoM: geoM,
	})
}

// Layout takes the outside size (e.g., the window size) and returns the (logical) screen size.
// If you don't have to adjust the screen size with the outside size, just return a fixed size.
func (g *Game) Layout(outsideWidth, outsideHeight int) (int, int) {
	return screenWidth, screenHeight
}

func main() {
	ebiten.SetWindowSize(screenWidth*2, screenHeight*2)
	ebiten.SetWindowTitle("Simple Ebiten Example")
	if err := ebiten.RunGame(&Game{}); err != nil {
		log.Fatal(err)
	}
}
